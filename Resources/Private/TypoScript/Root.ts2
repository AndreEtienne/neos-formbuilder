include: resource://TYPO3.TypoScript/Private/TypoScript/*
include: resource://TYPO3.Neos/Private/TypoScript/*

prototype(CRON.FormBuilder:FormElement) < prototype(TYPO3.Neos:Content) {
	templatePath = ${'resource://CRON.FormBuilder/Private/Templates/NodeTypes/' + String.replace(node.nodeData.nodeType, 'CRON.FormBuilder:', '') + '.html'}

	layoutName = 'Wrapper'

	layoutAttributes = TYPO3.TypoScript:Attributes
	layoutAttributes.class = ''
	layoutAttributes.class.@process.nodeType = TYPO3.TypoScript:Case {
		@context.nodeTypeClassName = ${String.toLowerCase(String.pregReplace(q(node).property('_nodeType.name'), '/[[:^alnum:]]/', '-')) + '-layout'}

		classIsString {
			condition = ${Type.isString(value)}
			renderer = ${String.trim(value) + ' ' + nodeTypeClassName}
		}

		classIsArray {
			condition = ${Type.isArray(value)}
			renderer = ${Array.push(value, nodeTypeClassName)}
		}
	}

	layoutAttributes.class = 'form-group'
	layoutAttributes.class.@process.required = ${value + (q(node).property('required') ? ' required' : '')}
	layoutAttributes.class.@process.errors = ${value + (flattenedErrors ? ' has-error' : '')}

	value = ${request.internalArguments.__submittedArguments.data[node.identifier]}
	value.@if.valueWasSubmitted = ${request.internalArguments.__submittedArguments.data[node.identifier]}
	multiple = ${q(node).property('multiple')}
	formName = ${'--cron_formbuilder-plugin[data][' + node.identifier + ']' + (q(node).property('multiple') ? '[]' : '')}

	attributes.id = ${node.identifier}
	attributes.name = ${'--cron_formbuilder-plugin[data][' + node.identifier + ']' + (q(node).property('multiple') ? '[]' : '')}
	attributes.required = ${q(node).property('required')}
	attributes.required.@if.isRequired = ${Configuration.setting('CRON.FormBuilder.View.useRequiredAttribute') && q(node).property('required')}
	attributes.class = 'form-control'

	node = ${node}
	flattenedErrors = ${flattenedErrors}
	tsPath = ${tsPath}
	tsPackageKey = ${tsPackageKey}
}

prototype(CRON.FormBuilder:CheckBox) < prototype(CRON.FormBuilder:FormElement) {
	layoutName = 'CheckboxWrapper'
	attributes.class = ''
	checked = ${this.value || q(node).property('checked')}
}

prototype(CRON.FormBuilder:CheckBoxGroup) < prototype(CRON.FormBuilder:FormElement) {

	elementsArray = ${q(node).children('elements').children().get()}

	@context.groupValue = ${this.value}
	@context.groupName = ${this.formName}

	attributes.name >
	attributes.class >

	elements = TYPO3.Neos:ContentCollection {
		nodePath = 'elements'

		prototype(CRON.FormBuilder:CheckBox) {

			layoutAttributes.class >
			attributes.name = ${groupName}
			checked = ${groupValue ? Array.indexOf(groupValue, q(node).property('value')) > -1 : q(node).property('checked')}
		}
	}
}


prototype(CRON.FormBuilder:Input) < prototype(CRON.FormBuilder:FormElement) {
}

prototype(CRON.FormBuilder:Option) < prototype(CRON.FormBuilder:FormElement) {
}

prototype(CRON.FormBuilder:Select) < prototype(CRON.FormBuilder:FormElement) {

	elementsArray = ${q(node).children('elements').children().get()}
	@context.selectValue = ${this.value}
	@context.selectMultiple = ${this.multiple}

	elements = TYPO3.Neos:ContentCollection {
		nodePath = 'elements'

		prototype(CRON.FormBuilder:Option) {
			selected = ${selectValue ? (selectMultiple ? Array.indexOf(selectValue, q(node).property('value')) > -1 : selectValue == q(node).property('value')) : q(node).property('selected')}
		}
	}
}

prototype(CRON.FormBuilder:TextArea) < prototype(CRON.FormBuilder:FormElement) {
}

prototype(CRON.FormBuilder:Text) < prototype(CRON.FormBuilder:FormElement) {
	attributes.name >
	attributes.class >
	text = ${q(node).property('text')}
}

prototype(CRON.FormBuilder:FieldSet) < prototype(CRON.FormBuilder:FormElement) {

	elementsArray = ${q(node).children('elements').children().get()}

	attributes.name >
	attributes.class >

	elements = TYPO3.Neos:ContentCollection {
		nodePath = 'elements'
	}
}


prototype(CRON.FormBuilder:Plugin) < prototype(TYPO3.Neos:Plugin) {
	package = 'CRON.FormBuilder'
	controller = 'FormBuilder'
	action = 'index'

	attributes = TYPO3.TypoScript:RawArray
	attributes.role = 'form'

	elementsArray = ${q(node).children('elements').children().get()}
	
	elements = TYPO3.Neos:ContentCollection {
		nodePath = 'elements'
	}

	tsPath = 'formElementRenderer'
	tsPackageKey = 'CRON.FormBuilder'
}

formElementRenderer =  TYPO3.TypoScript:Case {
	fallback {
		condition = ${true}
		type = ${node.nodeData.nodeType}
	}
}
